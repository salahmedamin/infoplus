{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["socket","socketIOClient","App","useState","setResponse","id","setid","makeid","length","result","characters","charactersLength","i","charAt","Math","floor","random","useEffect","on","z","console","log","data","r","contactsCount","d","Object","entries","map","e","type","placeholder","className","value","onChange","onClick","emit","document","querySelector","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oMAGMA,E,MAASC,GADE,wBACsB,CAAC,MAAQ,CAAC,SAAY,cAqE9CC,MApEf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACIC,GADJ,aAESD,qBAFT,gCAGOA,sBAHP,mBAGNE,EAHM,KAGFC,EAHE,OAIaH,mBAAS,IAJtB,mBAaPI,GAbO,UAaE,SAACC,GAId,IAHA,IAAIC,EAAmB,GACnBC,EAAmB,iEACnBC,EAAmBD,EAAWF,OACxBI,EAAI,EAAGA,EAAIJ,EAAQI,IAC1BH,GAAUC,EAAWG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,IAE1D,OAAOF,IAqBT,OAjBAQ,qBAAU,WACRjB,EAAOkB,GAAG,WAAU,SAACC,GACnBC,QAAQC,IAAIF,MAEdnB,EAAOkB,GAAG,WAAU,SAACI,GACnBF,QAAQC,IAAIC,MAEdtB,EAAOkB,GAAG,aAAY,SAACK,UACdA,EAAEC,cACT,IAAIC,EAAIC,OAAOC,QAAQJ,GAAGK,KAAI,SAACC,GAAD,OAASA,EAAE,MACzCzB,EAAYqB,MAEdzB,EAAOkB,GAAG,UAAS,SAACK,GAClBH,QAAQC,IAAIE,QAEb,IAGD,qCAYE,uBACA,uBACA,uBAAOO,KAAM,OAAQC,YAAa,KAAMC,UAAW,QAASC,MAAO5B,EAAI6B,SAAU,kBAAI5B,OACrF,uBACA,wBAAQ6B,QAAS,WACfnC,EAAOoC,KAAK,UAAU,CAAC,IAAM7B,EAAO,IAAI,GAAK8B,SAASC,cAAc,eAAeL,SADrF,qBAGA,uBACA,uBACA,wBAAQE,QAAS,WAAKnC,EAAOoC,KAAK,WAAW,CAAC,QAAS,KAAvD,6BCvDSG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFb,SAASc,eAAe,SAM1BZ,M","file":"static/js/main.4951be18.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"http://127.0.0.1:4001\";\nconst socket = socketIOClient(ENDPOINT,{\"query\":{\"username\": \"RANDUSER\"}});\nfunction App() {\n  const [response, setResponse] = useState([])\n  const [inp, setInp] = useState()\n  const [id, setid] = useState()\n  const [users, setusers] = useState([])\n//   const getMethods = (obj) => {\n//     let properties = new Set()\n//     let currentObj = obj\n//     do {\n//       Object.getOwnPropertyNames(currentObj).map(item => properties.add(item))\n//     } while ((currentObj = Object.getPrototypeOf(currentObj)))\n//     return [...properties.keys()].filter(item => typeof obj[item] === 'function')\n//   }\n  const makeid = (length)=>{\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n }\n \n\n  useEffect(() => {\n    socket.on(\"clients\",(z)=>{\n      console.log(z)\n    })\n    socket.on(\"newConn\",(data)=>{\n      console.log(data)\n    })\n    socket.on(\"XResponse\",(r)=>{\n      delete r.contactsCount\n      let d = Object.entries(r).map((e) => ( e[1] ));\n      setResponse(d)\n    })\n    socket.on(\"newMsg\",(r)=>{\n      console.log(r)\n    })\n  }, []);\n\n  return (\n    <>\n      {/* <button onClick={()=>{\n        socket.emit(\"X\",{\"user\":\"amin\"})\n      }}>Do IT !</button> \n       {\n        response !== null ?\n          response.map((e,k)=>{\n          return <div key={k}>{e.contact}</div>\n          })\n          :\n          ''\n      } */}\n      <br/>\n      <br/>\n      <input type={\"text\"} placeholder={\"ID\"} className={\"getId\"} value={id} onChange={()=>setid()} />\n      <br/>\n      <button onClick={()=>{\n        socket.emit(\"SendMsg\",{\"msg\":makeid(15),\"to\":document.querySelector(\"input.getId\").value})\n      }}>SEND IT</button>\n      <br/>\n      <br/>\n      <button onClick={()=>{socket.emit(\"getUsers\",{\"except\":false})}}>GET CLIENTS</button>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}